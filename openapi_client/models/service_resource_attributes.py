# coding: utf-8

"""
    MBTA

    MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api  # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: developer@mbta.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ServiceResourceAttributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'valid_days': 'list[float]',
        'start_date': 'date',
        'schedule_typicality': 'int',
        'schedule_type': 'str',
        'schedule_name': 'str',
        'removed_dates_notes': 'list[str]',
        'removed_dates': 'list[date]',
        'rating_start_date': 'date',
        'rating_end_date': 'date',
        'rating_description': 'str',
        'end_date': 'date',
        'description': 'str',
        'added_dates_notes': 'list[str]',
        'added_dates': 'list[date]'
    }

    attribute_map = {
        'valid_days': 'valid_days',
        'start_date': 'start_date',
        'schedule_typicality': 'schedule_typicality',
        'schedule_type': 'schedule_type',
        'schedule_name': 'schedule_name',
        'removed_dates_notes': 'removed_dates_notes',
        'removed_dates': 'removed_dates',
        'rating_start_date': 'rating_start_date',
        'rating_end_date': 'rating_end_date',
        'rating_description': 'rating_description',
        'end_date': 'end_date',
        'description': 'description',
        'added_dates_notes': 'added_dates_notes',
        'added_dates': 'added_dates'
    }

    def __init__(self, valid_days=None, start_date=None, schedule_typicality=None, schedule_type=None, schedule_name=None, removed_dates_notes=None, removed_dates=None, rating_start_date=None, rating_end_date=None, rating_description=None, end_date=None, description=None, added_dates_notes=None, added_dates=None, local_vars_configuration=None):  # noqa: E501
        """ServiceResourceAttributes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._valid_days = None
        self._start_date = None
        self._schedule_typicality = None
        self._schedule_type = None
        self._schedule_name = None
        self._removed_dates_notes = None
        self._removed_dates = None
        self._rating_start_date = None
        self._rating_end_date = None
        self._rating_description = None
        self._end_date = None
        self._description = None
        self._added_dates_notes = None
        self._added_dates = None
        self.discriminator = None

        if valid_days is not None:
            self.valid_days = valid_days
        if start_date is not None:
            self.start_date = start_date
        if schedule_typicality is not None:
            self.schedule_typicality = schedule_typicality
        self.schedule_type = schedule_type
        self.schedule_name = schedule_name
        if removed_dates_notes is not None:
            self.removed_dates_notes = removed_dates_notes
        if removed_dates is not None:
            self.removed_dates = removed_dates
        self.rating_start_date = rating_start_date
        self.rating_end_date = rating_end_date
        self.rating_description = rating_description
        if end_date is not None:
            self.end_date = end_date
        self.description = description
        if added_dates_notes is not None:
            self.added_dates_notes = added_dates_notes
        if added_dates is not None:
            self.added_dates = added_dates

    @property
    def valid_days(self):
        """Gets the valid_days of this ServiceResourceAttributes.  # noqa: E501


        :return: The valid_days of this ServiceResourceAttributes.  # noqa: E501
        :rtype: list[float]
        """
        return self._valid_days

    @valid_days.setter
    def valid_days(self, valid_days):
        """Sets the valid_days of this ServiceResourceAttributes.


        :param valid_days: The valid_days of this ServiceResourceAttributes.  # noqa: E501
        :type: list[float]
        """

        self._valid_days = valid_days

    @property
    def start_date(self):
        """Gets the start_date of this ServiceResourceAttributes.  # noqa: E501

        Earliest date which is valid for this service. Format is ISO8601.  # noqa: E501

        :return: The start_date of this ServiceResourceAttributes.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ServiceResourceAttributes.

        Earliest date which is valid for this service. Format is ISO8601.  # noqa: E501

        :param start_date: The start_date of this ServiceResourceAttributes.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def schedule_typicality(self):
        """Gets the schedule_typicality of this ServiceResourceAttributes.  # noqa: E501

        Describes how well this schedule represents typical service for the listed `schedule_type`  | Value | Description                                                                 | |-------|-----------------------------------------------------------------------------| | `0`   | Not defined.                                                                | | `1`   | Typical service with perhaps minor modifications                            | | `2`   | Extra service supplements typical schedules                                 | | `3`   | Reduced holiday service is provided by typical Saturday or Sunday schedule  | | `4`   | Major changes in service due to a planned disruption, such as construction  | | `5`   | Major reductions in service for weather events or other atypical situations |   # noqa: E501

        :return: The schedule_typicality of this ServiceResourceAttributes.  # noqa: E501
        :rtype: int
        """
        return self._schedule_typicality

    @schedule_typicality.setter
    def schedule_typicality(self, schedule_typicality):
        """Sets the schedule_typicality of this ServiceResourceAttributes.

        Describes how well this schedule represents typical service for the listed `schedule_type`  | Value | Description                                                                 | |-------|-----------------------------------------------------------------------------| | `0`   | Not defined.                                                                | | `1`   | Typical service with perhaps minor modifications                            | | `2`   | Extra service supplements typical schedules                                 | | `3`   | Reduced holiday service is provided by typical Saturday or Sunday schedule  | | `4`   | Major changes in service due to a planned disruption, such as construction  | | `5`   | Major reductions in service for weather events or other atypical situations |   # noqa: E501

        :param schedule_typicality: The schedule_typicality of this ServiceResourceAttributes.  # noqa: E501
        :type: int
        """

        self._schedule_typicality = schedule_typicality

    @property
    def schedule_type(self):
        """Gets the schedule_type of this ServiceResourceAttributes.  # noqa: E501

        Description of the schedule type the service_id can be applied. For example, on a holiday, the schedule_type value may be \"Saturday\" or \"Sunday\". Current valid values are \"Weekday\", \"Saturday\", \"Sunday\", or \"Other\"   # noqa: E501

        :return: The schedule_type of this ServiceResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this ServiceResourceAttributes.

        Description of the schedule type the service_id can be applied. For example, on a holiday, the schedule_type value may be \"Saturday\" or \"Sunday\". Current valid values are \"Weekday\", \"Saturday\", \"Sunday\", or \"Other\"   # noqa: E501

        :param schedule_type: The schedule_type of this ServiceResourceAttributes.  # noqa: E501
        :type: str
        """

        self._schedule_type = schedule_type

    @property
    def schedule_name(self):
        """Gets the schedule_name of this ServiceResourceAttributes.  # noqa: E501

        Description of when the `service_id` is in effect.  # noqa: E501

        :return: The schedule_name of this ServiceResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._schedule_name

    @schedule_name.setter
    def schedule_name(self, schedule_name):
        """Sets the schedule_name of this ServiceResourceAttributes.

        Description of when the `service_id` is in effect.  # noqa: E501

        :param schedule_name: The schedule_name of this ServiceResourceAttributes.  # noqa: E501
        :type: str
        """

        self._schedule_name = schedule_name

    @property
    def removed_dates_notes(self):
        """Gets the removed_dates_notes of this ServiceResourceAttributes.  # noqa: E501


        :return: The removed_dates_notes of this ServiceResourceAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._removed_dates_notes

    @removed_dates_notes.setter
    def removed_dates_notes(self, removed_dates_notes):
        """Sets the removed_dates_notes of this ServiceResourceAttributes.


        :param removed_dates_notes: The removed_dates_notes of this ServiceResourceAttributes.  # noqa: E501
        :type: list[str]
        """

        self._removed_dates_notes = removed_dates_notes

    @property
    def removed_dates(self):
        """Gets the removed_dates of this ServiceResourceAttributes.  # noqa: E501


        :return: The removed_dates of this ServiceResourceAttributes.  # noqa: E501
        :rtype: list[date]
        """
        return self._removed_dates

    @removed_dates.setter
    def removed_dates(self, removed_dates):
        """Sets the removed_dates of this ServiceResourceAttributes.


        :param removed_dates: The removed_dates of this ServiceResourceAttributes.  # noqa: E501
        :type: list[date]
        """

        self._removed_dates = removed_dates

    @property
    def rating_start_date(self):
        """Gets the rating_start_date of this ServiceResourceAttributes.  # noqa: E501

        Earliest date which is a part of the rating (season) which contains this service. Format is ISO8601.  # noqa: E501

        :return: The rating_start_date of this ServiceResourceAttributes.  # noqa: E501
        :rtype: date
        """
        return self._rating_start_date

    @rating_start_date.setter
    def rating_start_date(self, rating_start_date):
        """Sets the rating_start_date of this ServiceResourceAttributes.

        Earliest date which is a part of the rating (season) which contains this service. Format is ISO8601.  # noqa: E501

        :param rating_start_date: The rating_start_date of this ServiceResourceAttributes.  # noqa: E501
        :type: date
        """

        self._rating_start_date = rating_start_date

    @property
    def rating_end_date(self):
        """Gets the rating_end_date of this ServiceResourceAttributes.  # noqa: E501

        Latest date which is a part of the rating (season) which contains this service. Format is ISO8601.  # noqa: E501

        :return: The rating_end_date of this ServiceResourceAttributes.  # noqa: E501
        :rtype: date
        """
        return self._rating_end_date

    @rating_end_date.setter
    def rating_end_date(self, rating_end_date):
        """Sets the rating_end_date of this ServiceResourceAttributes.

        Latest date which is a part of the rating (season) which contains this service. Format is ISO8601.  # noqa: E501

        :param rating_end_date: The rating_end_date of this ServiceResourceAttributes.  # noqa: E501
        :type: date
        """

        self._rating_end_date = rating_end_date

    @property
    def rating_description(self):
        """Gets the rating_description of this ServiceResourceAttributes.  # noqa: E501

        Human-readable description of the rating (season), as it should appear on public-facing websites and applications.  # noqa: E501

        :return: The rating_description of this ServiceResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._rating_description

    @rating_description.setter
    def rating_description(self, rating_description):
        """Sets the rating_description of this ServiceResourceAttributes.

        Human-readable description of the rating (season), as it should appear on public-facing websites and applications.  # noqa: E501

        :param rating_description: The rating_description of this ServiceResourceAttributes.  # noqa: E501
        :type: str
        """

        self._rating_description = rating_description

    @property
    def end_date(self):
        """Gets the end_date of this ServiceResourceAttributes.  # noqa: E501

        Latest date which is valid for this service. Format is ISO8601.  # noqa: E501

        :return: The end_date of this ServiceResourceAttributes.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ServiceResourceAttributes.

        Latest date which is valid for this service. Format is ISO8601.  # noqa: E501

        :param end_date: The end_date of this ServiceResourceAttributes.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def description(self):
        """Gets the description of this ServiceResourceAttributes.  # noqa: E501

        Human-readable description of the service, as it should appear on public-facing websites and applications.  # noqa: E501

        :return: The description of this ServiceResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceResourceAttributes.

        Human-readable description of the service, as it should appear on public-facing websites and applications.  # noqa: E501

        :param description: The description of this ServiceResourceAttributes.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def added_dates_notes(self):
        """Gets the added_dates_notes of this ServiceResourceAttributes.  # noqa: E501


        :return: The added_dates_notes of this ServiceResourceAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._added_dates_notes

    @added_dates_notes.setter
    def added_dates_notes(self, added_dates_notes):
        """Sets the added_dates_notes of this ServiceResourceAttributes.


        :param added_dates_notes: The added_dates_notes of this ServiceResourceAttributes.  # noqa: E501
        :type: list[str]
        """

        self._added_dates_notes = added_dates_notes

    @property
    def added_dates(self):
        """Gets the added_dates of this ServiceResourceAttributes.  # noqa: E501


        :return: The added_dates of this ServiceResourceAttributes.  # noqa: E501
        :rtype: list[date]
        """
        return self._added_dates

    @added_dates.setter
    def added_dates(self, added_dates):
        """Sets the added_dates of this ServiceResourceAttributes.


        :param added_dates: The added_dates of this ServiceResourceAttributes.  # noqa: E501
        :type: list[date]
        """

        self._added_dates = added_dates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceResourceAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceResourceAttributes):
            return True

        return self.to_dict() != other.to_dict()
