# coding: utf-8

"""
    MBTA

    MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api  # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: developer@mbta.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class FacilityResourceAttributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'short_name': 'str',
        'properties': 'list[FacilityProperty]',
        'longitude': 'float',
        'long_name': 'str',
        'latitude': 'float'
    }

    attribute_map = {
        'type': 'type',
        'short_name': 'short_name',
        'properties': 'properties',
        'longitude': 'longitude',
        'long_name': 'long_name',
        'latitude': 'latitude'
    }

    def __init__(self, type=None, short_name=None, properties=None, longitude=None, long_name=None, latitude=None, local_vars_configuration=None):  # noqa: E501
        """FacilityResourceAttributes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._short_name = None
        self._properties = None
        self._longitude = None
        self._long_name = None
        self._latitude = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if short_name is not None:
            self.short_name = short_name
        if properties is not None:
            self.properties = properties
        if longitude is not None:
            self.longitude = longitude
        if long_name is not None:
            self.long_name = long_name
        if latitude is not None:
            self.latitude = latitude

    @property
    def type(self):
        """Gets the type of this FacilityResourceAttributes.  # noqa: E501

        The type of the facility.  # noqa: E501

        :return: The type of this FacilityResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FacilityResourceAttributes.

        The type of the facility.  # noqa: E501

        :param type: The type of this FacilityResourceAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["BIKE_STORAGE", "BRIDGE_PLATE", "ELECTRIC_CAR_CHARGERS", "ELEVATED_SUBPLATFORM", "ELEVATOR", "ESCALATOR", "FARE_MEDIA_ASSISTANCE_FACILITY", "FARE_MEDIA_ASSISTANT", "FARE_VENDING_MACHINE", "FARE_VENDING_RETAILER", "FULLY_ELEVATED_PLATFORM", "OTHER", "PARKING_AREA", "PICK_DROP", "PORTABLE_BOARDING_LIFT", "RAMP", "TAXI_STAND", "TICKET_WINDOW"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def short_name(self):
        """Gets the short_name of this FacilityResourceAttributes.  # noqa: E501

        Short name of the facility  # noqa: E501

        :return: The short_name of this FacilityResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this FacilityResourceAttributes.

        Short name of the facility  # noqa: E501

        :param short_name: The short_name of this FacilityResourceAttributes.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def properties(self):
        """Gets the properties of this FacilityResourceAttributes.  # noqa: E501

        A list of name/value pairs that apply to the facility. See [MBTA's facility documentation](https://www.mbta.com/developers/gtfs/f#facilities_properties_definitions) for more information on the possible names and values.  # noqa: E501

        :return: The properties of this FacilityResourceAttributes.  # noqa: E501
        :rtype: list[FacilityProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this FacilityResourceAttributes.

        A list of name/value pairs that apply to the facility. See [MBTA's facility documentation](https://www.mbta.com/developers/gtfs/f#facilities_properties_definitions) for more information on the possible names and values.  # noqa: E501

        :param properties: The properties of this FacilityResourceAttributes.  # noqa: E501
        :type: list[FacilityProperty]
        """

        self._properties = properties

    @property
    def longitude(self):
        """Gets the longitude of this FacilityResourceAttributes.  # noqa: E501

        Longitude of the facility. Degrees East, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#Longitudes_on_WGS.C2.A084) coordinate system. See [GTFS `facilities.txt` `facility_lon`]   # noqa: E501

        :return: The longitude of this FacilityResourceAttributes.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this FacilityResourceAttributes.

        Longitude of the facility. Degrees East, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#Longitudes_on_WGS.C2.A084) coordinate system. See [GTFS `facilities.txt` `facility_lon`]   # noqa: E501

        :param longitude: The longitude of this FacilityResourceAttributes.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def long_name(self):
        """Gets the long_name of this FacilityResourceAttributes.  # noqa: E501

        Name of the facility  # noqa: E501

        :return: The long_name of this FacilityResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this FacilityResourceAttributes.

        Name of the facility  # noqa: E501

        :param long_name: The long_name of this FacilityResourceAttributes.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def latitude(self):
        """Gets the latitude of this FacilityResourceAttributes.  # noqa: E501

        Latitude of the facility.  Degrees North, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#A_new_World_Geodetic_System:_WGS.C2.A084) coordinate system. See [GTFS `facilities.txt` `facility_lat`]   # noqa: E501

        :return: The latitude of this FacilityResourceAttributes.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this FacilityResourceAttributes.

        Latitude of the facility.  Degrees North, in the [WGS-84](https://en.wikipedia.org/wiki/World_Geodetic_System#A_new_World_Geodetic_System:_WGS.C2.A084) coordinate system. See [GTFS `facilities.txt` `facility_lat`]   # noqa: E501

        :param latitude: The latitude of this FacilityResourceAttributes.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FacilityResourceAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FacilityResourceAttributes):
            return True

        return self.to_dict() != other.to_dict()
