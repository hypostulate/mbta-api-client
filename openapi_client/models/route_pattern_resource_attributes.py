# coding: utf-8

"""
    MBTA

    MBTA service API. https://www.mbta.com Source code: https://github.com/mbta/api  # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: developer@mbta.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RoutePatternResourceAttributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'typicality': 'int',
        'sort_order': 'int',
        'name': 'str',
        'direction_id': 'int'
    }

    attribute_map = {
        'typicality': 'typicality',
        'sort_order': 'sort_order',
        'name': 'name',
        'direction_id': 'direction_id'
    }

    def __init__(self, typicality=None, sort_order=None, name=None, direction_id=None, local_vars_configuration=None):  # noqa: E501
        """RoutePatternResourceAttributes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._typicality = None
        self._sort_order = None
        self._name = None
        self._direction_id = None
        self.discriminator = None

        if typicality is not None:
            self.typicality = typicality
        if sort_order is not None:
            self.sort_order = sort_order
        if name is not None:
            self.name = name
        if direction_id is not None:
            self.direction_id = direction_id

    @property
    def typicality(self):
        """Gets the typicality of this RoutePatternResourceAttributes.  # noqa: E501

        Explains how common the route pattern is. For the MBTA, this is within the context of the entire route. Current valid values are: | Value | Description | |-|-| | `0` | Not defined | | `1` | Typical. Pattern is common for the route. Most routes will have only one such pattern per direction. A few routes may have more than 1, such as the Red Line (with one branch to Ashmont and another to Braintree); routes with more than 2 are rare. | | `2` | Pattern is a deviation from the regular route. | | `3` | Pattern represents a highly atypical pattern for the route, such as a special routing which only runs a handful of times per day. | | `4` | Diversions from normal service, such as planned detours, bus shuttles, or snow routes. |   # noqa: E501

        :return: The typicality of this RoutePatternResourceAttributes.  # noqa: E501
        :rtype: int
        """
        return self._typicality

    @typicality.setter
    def typicality(self, typicality):
        """Sets the typicality of this RoutePatternResourceAttributes.

        Explains how common the route pattern is. For the MBTA, this is within the context of the entire route. Current valid values are: | Value | Description | |-|-| | `0` | Not defined | | `1` | Typical. Pattern is common for the route. Most routes will have only one such pattern per direction. A few routes may have more than 1, such as the Red Line (with one branch to Ashmont and another to Braintree); routes with more than 2 are rare. | | `2` | Pattern is a deviation from the regular route. | | `3` | Pattern represents a highly atypical pattern for the route, such as a special routing which only runs a handful of times per day. | | `4` | Diversions from normal service, such as planned detours, bus shuttles, or snow routes. |   # noqa: E501

        :param typicality: The typicality of this RoutePatternResourceAttributes.  # noqa: E501
        :type: int
        """

        self._typicality = typicality

    @property
    def sort_order(self):
        """Gets the sort_order of this RoutePatternResourceAttributes.  # noqa: E501

        Can be used to order the route patterns in a way which is ideal for presentation to customers. Route patterns with smaller sort_order values should be displayed before those with larger values.   # noqa: E501

        :return: The sort_order of this RoutePatternResourceAttributes.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this RoutePatternResourceAttributes.

        Can be used to order the route patterns in a way which is ideal for presentation to customers. Route patterns with smaller sort_order values should be displayed before those with larger values.   # noqa: E501

        :param sort_order: The sort_order of this RoutePatternResourceAttributes.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def name(self):
        """Gets the name of this RoutePatternResourceAttributes.  # noqa: E501

        User-facing description of where trips on the route pattern serve. These names are published in the form Destination, Destination via Street or Landmark, Origin - Destination, or Origin - Destination via Street or Landmark. Note that names for bus and subway route patterns currently do not include the origin location, but will in the future.   # noqa: E501

        :return: The name of this RoutePatternResourceAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoutePatternResourceAttributes.

        User-facing description of where trips on the route pattern serve. These names are published in the form Destination, Destination via Street or Landmark, Origin - Destination, or Origin - Destination via Street or Landmark. Note that names for bus and subway route patterns currently do not include the origin location, but will in the future.   # noqa: E501

        :param name: The name of this RoutePatternResourceAttributes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def direction_id(self):
        """Gets the direction_id of this RoutePatternResourceAttributes.  # noqa: E501

        Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.    # noqa: E501

        :return: The direction_id of this RoutePatternResourceAttributes.  # noqa: E501
        :rtype: int
        """
        return self._direction_id

    @direction_id.setter
    def direction_id(self, direction_id):
        """Sets the direction_id of this RoutePatternResourceAttributes.

        Direction in which trip is traveling: `0` or `1`.  The meaning of `direction_id` varies based on the route. You can programmatically get the direction names from `/routes` `/data/{index}/attributes/direction_names` or `/routes/{id}` `/data/attributes/direction_names`.    # noqa: E501

        :param direction_id: The direction_id of this RoutePatternResourceAttributes.  # noqa: E501
        :type: int
        """

        self._direction_id = direction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutePatternResourceAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoutePatternResourceAttributes):
            return True

        return self.to_dict() != other.to_dict()
